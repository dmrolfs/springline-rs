apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "common.name" . }}-config
  labels:
{{ include "common.labels" . | indent 4 }}
  annotations:
{{ include "common.annotations" . | indent 4 }}
data:
  decision_basis: |
{{ .Files.Get "env/decision_basis.polar" | indent 4 }}

  metrics_labels: |
    ---
    realm: {{ .Values.global.realm }}
    pipelineId: {{ .Values.global.pipeline.id }}
    pipelineVersionId: {{ .Values.global.pipeline.versionId }}
    pipelineTemplateId: {{ .Values.global.pipeline.templateId }}
    pipelineDeploymentId: {{ .Values.global.pipeline.jobId }}


  config: |
    ---
    flink:
      job_manager_host: {{ include "pipeline.jobName" . }}{{ .Values.global.convention.jobManagerSuffix }}{{ .Values.global.convention.serviceSuffix }}.{{ .Release.Namespace }}.svc.cluster.local

    kubernetes:
      namespace: {{ .Release.Namespace }}
      patch_settle_timeout_secs: {{ .Values.application.kubernetes.patch_settle_timeout_secs }}

    sensor:
      flink:
        metric_orders:
          - Operator:
              name: "{{ .Values.application.sensor.flink.metric_orders.flow.source.name }}"
              position: source
              metric: records-lag-max
              agg: sum
              telemetry_path: flow.source_records_lag_max
              telemetry_type: Integer
          - Operator:
              name: "{{ .Values.application.sensor.flink.metric_orders.flow.source.name }}"
              position: source
              metric: assigned-partitions
              agg: sum
              telemetry_path: flow.source_assigned_partitions
              telemetry_type: Integer
          - Operator:
              name: "{{ .Values.application.sensor.flink.metric_orders.flow.source.name }}"
              position: source
              metric: records-consumed-rate
              agg: sum
              telemetry_path: flow.source_records_consumed_rate
              telemetry_type: Float
          #todo: These are actually in JobManager Scope, which needs to be added to sensor
          - Job:
              metric: Status.JVM.ClassLoader.ClassesLoaded
              agg: max
              telemetry_path: cluster.classes_loaded
              telemetry_type: Integer
          - Job:
              metric: Status.JVM.ClassLoader.ClassesUnloaded
              agg: max
              telemetry_path: cluster.classes_loaded
              telemetry_type: Integer
          - Job:
              metric: lastCheckpointDuration
              agg: max
              telemetry_path: health.last_checkpoint_duration
              telemetry_type: Integer

    eligibility:
      template_data:
        cooling_secs: {{ .Values.application.eligibility.template_data.cooling_secs }}
        stable_secs: {{ .Values.application.eligibility.template_data.stable_secs }}

    decision:
      policies:
        - source: file
          policy:
            path: "./resources/decision.polar"
            is_template: true
        - source: file
          policy:
            path: "/opt/springline/resources/chart_decision_basis.polar"
            is_template: true
      template_data:
        basis: chart_decision_basis
        max_healthy_relative_lag_velocity: {{ .Values.application.decision.template_data.max_healthy_relative_lag_velocity }}
        min_task_utilization: {{ .Values.application.decision.template_data.min_task_utilization }}
        evaluate_duration_secs: {{ .Values.application.decision.template_data.evaluate_duration_secs }}

    plan:
      performance_repository:
        storage: memory

    governance:
      rules:
        min_parallelism: {{ .Values.application.governance.rules.min_parallelism }}
        max_parallelism: {{ .Values.application.governance.rules.max_parallelism }}
        min_cluster_size: {{ .Values.application.governance.rules.min_cluster_size }}
        max_cluster_size: {{ .Values.application.governance.rules.max_cluster_size }}
        min_scaling_step: {{ .Values.application.governance.rules.min_scaling_step }}
        max_scaling_step: {{ .Values.application.governance.rules.max_scaling_step }}

    action:
      taskmanager:
        # temp hard code until we can directly embed autoscaler into runtime ns
        label_selector: "component=taskmanager,release={{ include "pipeline.jobName" . }}"
        max_cull_ratio: {{ .Values.application.action.taskmanager.max_cull_ratio }}
        deploy_resource: {{ default "statefulset" .Values.deployment.taskManagerDeployment }}/{{ include "pipeline.jobName" . }}{{ .Values.global.convention.taskManagerSuffix }}
        kubernetes_api:
          api_timeout_secs: {{ .Values.application.action.taskmanager.kubernetes_api.api_timeout_secs }}
      flink:
        polling_interval_secs: {{ .Values.application.action.flink.polling_interval_secs }}
        restart:
          operation_timeout_secs: {{ .Values.application.action.flink.restart.operation_timeout_secs }}
#        label_selector: "component=taskmanager,release={{ include "common.name" . }}"
#        deploy_resource: statefulset/{{ include "common.name" . }}-tm
#        max_healthy_heap_memory_load: f64
#        max_healthy_network_io_utilization: f64
#        max_healthy_lag: 133.0
#        min_healthy_lag: 0.0
#    eligibility:
#      template_data:
#        cooling_secs:
#      min_scaling_step:
#      restart:
#        secs:
#        nanos:
#      max_catch_up:
#        secs:
#        nanos:
#      recovery_valid:
#        secs:
#        nanos:
#    governance:
#      rules:
#        min_cluster_size: 0
#        max_cluster_size: 20
#        min_scaling_step: 1
#        max_scaling_step: 4
