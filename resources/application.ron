(
    // set engine.machine_id and engine.node_id via environment variable
    http: ( host: "0.0.0.0", port: 8000, ),
    kubernetes: ( client_config: "infer", ),
    collection: (
        flink: (
            job_manager_uri_scheme: "http", // default value
            job_manager_host: "localhost",  // default value
            job_manager_port: 8081,         // default value
            metrics_initial_delay_secs: 15,
            metrics_interval_secs: 15,
            metric_orders: [
//                ("Kafka", "records-lag-max", "value", "flow.input_records_lag_max", "Integer"),
            ],
            max_retries: 3,                 // default value
        ),
        sources: {
//            "foo": ( type: "csv", path: "./resources/bar.toml", ),
        }
    ),
    eligibility: (
        policies: [
            (source: "file", policy: (path: "./resources/eligibility.polar", is_template: true)),
            (source: "file", policy: (path: "./resources/eligibility_basis.polar", is_template: true)),
        ],
        template_data: (
            basis: "eligibility_basis",
            cooling_secs: 900,
            stable_secs: 900,
        ),
    ),
    decision: (
        policies: [
            (source: "file", policy: (path: "./resources/decision.polar", is_template: true)),
            (source: "file", policy: (path: "./resources/decision_basis.polar", is_template: true)),
        ],
        template_data: (
            basis: "decision_basis",
            max_healthy_lag: 133.0,
            min_healthy_lag: 0.0,
            max_healthy_cpu_load: 0.7,
            max_healthy_heap_memory_load: 0.5,
            max_healthy_network_io_utilization: 0.60,
        ),
    ),
    plan: (
        min_scaling_step: 2,
        restart: (secs: 120, nanos: 0),
        max_catch_up: (secs: 600, nanos: 0),
        recovery_valid: (secs: 300, nanos: 0),
        performance_repository: ( storage: "file", storage_path: "./tmp", ),
        window: 20,
        spike: (
            std_deviation_threshold: 5.0,
            influence: 0.75,
            length_threshold: 3,
        ),
    ),
    governance: (
        policy: (
            policies: [
                (source: "file", policy: (path: "./resources/governance.polar")),
            ],
        ),
        rules: (
            min_cluster_size: 0,
            max_cluster_size: 20,
            min_scaling_step: 2,
            max_scaling_step: 10,
            custom: {},
        ),
    ),
    execution: (
      k8s_workload_resource: "statefulset/dr-springline-tm",
    ),
    context_stub: (
        all_sinks_healthy: true,
        cluster_is_deploying: false,
        cluster_last_deployment: "2020-03-01T04:28:07Z",
    ),
)