(
    // set engine.machine_id and engine.node_id via environment variable
    http: ( host: "0.0.0.0", port: 8000, ),
    collection: (
        flink: (
            metric_orders: [
                // ("Jobs", "uptime", "max"),                          // does not work w reactive mode
                // ("Jobs", "numRestarts", "max"),
                // ("Jobs", "numberOfCompletedCheckpoints", "max"),    // does not work w reactive mode
                // ("Jobs", "numberOfFailedCheckpoints", "max"),       // does not work w reactive mode
                // ("Task", "numRecordsInPerSecond", "max"),
                // ("Task", "numRecordsOutPerSecond", "max"),
                ("Kafka", "records-lag-max", "none"),
                // ("Kinesis", "millisBehindLatest", "none"),
                // ("TaskManagers", "Status.JVM.CPU.LOAD", "max"),
                // ("TaskManagers", "Status.JVM.Memory.Heap.Used", "max"),
                // ("TaskManagers", "Status.JVM.Memory.Heap.Committed", "max"),
                // ("TaskManagers", "Status.JVM.Threads.Count", "max"),
                // ("Task", "buffers.inputQueueLength", "max"), // verify,
                // ("Task", "buffers.inPoolUsage", "max"), // verify,
                // ("Task", "buffers.outputQueueLength", "max"), // verify,
                // ("Task", "buffers.outPoolUsage", "max"), // verify,
            ],
        ),
        sources: {
            "foo": ( type: "csv", path: "./resources/bar.toml", ),
        }
    ),
    eligibility: (
        policies: [
            (source: "file", policy: (path: "./resources/eligibility.polar", is_template: true)),
            (source: "file", policy: (path: "./resources/eligibility_basis.polar", is_template: true)),
        ],
        template_data: (
            basis: "eligibility_basis",
            cooling_secs: 900,
            stable_secs: 900,
        ),
    ),
    decision: (
        policies: [
            (source: "file", policy: (path: "./resources/decision.polar", is_template: true)),
            (source: "file", policy: (path: "./resources/decision_basis.polar", is_template: true)),
        ],
        template_data: (
            basis: "decision_basis",
            max_healthy_lag: 133.0,
            min_healthy_lag: 0.0,
            max_healthy_cpu_load: 0.7,
        ),
    ),
    plan: (
        min_scaling_step: 2,
        restart: (secs: 120, nanos: 0),
        max_catch_up: (secs: 600, nanos: 0),
        recovery_valid: (secs: 300, nanos: 0),
        performance_repository: ( storage: "file", storage_path: "./tests/data/performance.data", ),
        window: 20,
        spike: (
            std_deviation_threshold: 5.0,
            influence: 0.75,
            length_threshold: 3,
        ),
    ),
    governance: (
        policy: (
            policies: [
                (source: "file", policy: (path: "./resources/governance.polar")),
            ],
        ),
        rules: (
            min_cluster_size: 0,
            max_cluster_size: 20,
            min_scaling_step: 2,
            max_scaling_step: 10,
            custom: {},
        ),
    ),
    execution: (),
)